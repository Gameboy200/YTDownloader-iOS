name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          BUILD_CERTIFICATE_BASE64: ${{ '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' }}
          P12_PASSWORD: ${{ 'max' }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ '' }}
          KEYCHAIN_PASSWORD: ${{ 'max' }}
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
           # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
